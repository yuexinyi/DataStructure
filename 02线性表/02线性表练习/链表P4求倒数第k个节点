# 题目来源

https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&&tqId=11167&rp=2&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking

# 题目描述

输入一个链表，输出该链表中倒数第k个结点

# 解题思路

1.集合法

将链表结点全部添加至集合中，然后根据索引特性寻找倒数第k个结点（集合长度-k值）

2.遍历法

（1）第一次链表遍历，获得链表长度n；

（2）从头结点向后走n-k步，获得倒数第k个结点；

3.快慢指针法

定义两个指针fast和slow

（1）fast先走k步；

（2）只要fast不为空，fast走一步，slow走一步，直到fast走到链表最后，此时的slow就是倒数第k个结点（fast与slow始终保持k个距离）

# Code Show

集合法

```java
import java.util.ArrayList;

public class Solution {
    public ListNode FindKthToTail(ListNode head,int k) {
        if(head == null){
            return null;
        }
        ArrayList<ListNode> list = new ArrayList<>();
        while(head != null){
            list.add(head);
            head = head.next;
        }
        if(k <= 0 || k > list.size()){
            return null;
        }else{
            return list.get(list.size()-k);
        }
    }
}
```

遍历法

```java
public class Solution {
    public ListNode FindKthToTail(ListNode head,int k) {
        int n = 0;
        Node p = head;
        Node q = head;
        //第一遍循环获得链表长度n
        while (p != null){
            n++;
            p = p.next;
        }
        //第二遍循环返回倒数第k个结点
        for(int i = 0;i < n-k;i++){
            q = q.next;
        }
        return q;
    }
}
```

快慢指针法

```java
public class Solution {
    public ListNode FindKthToTail(ListNode head,int k) {
        if(head == null || k <=0){
            return null;
        }
        ListNode fast = head;
        ListNode slow = head;
        for(int i = 0;i < k;i++){
            if(fast == null){
                return null;
            }
            fast=fast.next;
        }
        while(fast != null){
            slow=slow.next;
            fast=fast.next;
        }
        return slow;
    }
}
```
